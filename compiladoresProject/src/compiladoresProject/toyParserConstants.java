/* Generated By:JavaCC: Do not edit this line. toyParserConstants.java */
package compiladoresProject;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface toyParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int ASSIGN = 5;
  /** RegularExpression Id. */
  int PLUS = 6;
  /** RegularExpression Id. */
  int MINUS = 7;
  /** RegularExpression Id. */
  int MULTIPLY = 8;
  /** RegularExpression Id. */
  int DIVIDE = 9;
  /** RegularExpression Id. */
  int EQ = 10;
  /** RegularExpression Id. */
  int GT = 11;
  /** RegularExpression Id. */
  int LT = 12;
  /** RegularExpression Id. */
  int LE = 13;
  /** RegularExpression Id. */
  int GE = 14;
  /** RegularExpression Id. */
  int NE = 15;
  /** RegularExpression Id. */
  int MOD = 16;
  /** RegularExpression Id. */
  int AND = 17;
  /** RegularExpression Id. */
  int LPAREN = 18;
  /** RegularExpression Id. */
  int RPAREN = 19;
  /** RegularExpression Id. */
  int COLON = 20;
  /** RegularExpression Id. */
  int SEMICOLON = 21;
  /** RegularExpression Id. */
  int COMMA = 22;
  /** RegularExpression Id. */
  int DOT = 23;
  /** RegularExpression Id. */
  int LBRACE = 24;
  /** RegularExpression Id. */
  int RBRACE = 25;
  /** RegularExpression Id. */
  int LBRACKET = 26;
  /** RegularExpression Id. */
  int RBRACKET = 27;
  /** RegularExpression Id. */
  int QUOTES = 28;
  /** RegularExpression Id. */
  int QUALQUER_CARACTER = 29;
  /** RegularExpression Id. */
  int SEQUANCIA_CARACTER_EXCETO_RBRACE = 30;
  /** RegularExpression Id. */
  int LETRA = 31;
  /** RegularExpression Id. */
  int DIGITO = 32;
  /** RegularExpression Id. */
  int PROGRAM = 33;
  /** RegularExpression Id. */
  int BEGIN = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int THEN = 36;
  /** RegularExpression Id. */
  int ELSE = 37;
  /** RegularExpression Id. */
  int WHILE = 38;
  /** RegularExpression Id. */
  int DO = 39;
  /** RegularExpression Id. */
  int VAR = 40;
  /** RegularExpression Id. */
  int INTEGER = 41;
  /** RegularExpression Id. */
  int BOOLEAN = 42;
  /** RegularExpression Id. */
  int FALSE = 43;
  /** RegularExpression Id. */
  int TRUE = 44;
  /** RegularExpression Id. */
  int END = 45;
  /** RegularExpression Id. */
  int STATIC = 46;
  /** RegularExpression Id. */
  int CONST = 47;
  /** RegularExpression Id. */
  int REPEAT = 48;
  /** RegularExpression Id. */
  int UNTIL = 49;
  /** RegularExpression Id. */
  int FOR = 50;
  /** RegularExpression Id. */
  int TO = 51;
  /** RegularExpression Id. */
  int STEP = 52;
  /** RegularExpression Id. */
  int RETURN = 53;
  /** RegularExpression Id. */
  int FLOAT = 54;
  /** RegularExpression Id. */
  int CHAR = 55;
  /** RegularExpression Id. */
  int ARRAY = 56;
  /** RegularExpression Id. */
  int OF = 57;
  /** RegularExpression Id. */
  int PROCEDURE = 58;
  /** RegularExpression Id. */
  int FUNCTION = 59;
  /** RegularExpression Id. */
  int REF = 60;
  /** RegularExpression Id. */
  int VALUE = 61;
  /** RegularExpression Id. */
  int NOT = 62;
  /** RegularExpression Id. */
  int OR = 63;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\":=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"mod\"",
    "\"and\"",
    "\"(\"",
    "\")\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"\\\'\"",
    "<QUALQUER_CARACTER>",
    "<SEQUANCIA_CARACTER_EXCETO_RBRACE>",
    "<LETRA>",
    "<DIGITO>",
    "\"program\"",
    "\"begin\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"var\"",
    "\"integer\"",
    "\"boolean\"",
    "\"false\"",
    "\"true\"",
    "\"end\"",
    "\"static\"",
    "\"const\"",
    "\"repeat\"",
    "\"until\"",
    "\"for\"",
    "\"to\"",
    "\"step\"",
    "\"return\"",
    "\"float\"",
    "\"char\"",
    "\"array\"",
    "\"of\"",
    "\"procedure\"",
    "\"function\"",
    "\"ref\"",
    "\"value\"",
    "\"not\"",
    "\"or\"",
  };

}
